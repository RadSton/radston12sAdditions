package io.radston12.radston12sadditions.screen;

import com.google.common.collect.Lists;
import io.radston12.radston12sadditions.block.ModBlocks;
import io.radston12.radston12sadditions.recipe.SawMillingRecipe;
import net.minecraft.sounds.SoundEvents;
import net.minecraft.sounds.SoundSource;
import net.minecraft.world.Container;
import net.minecraft.world.SimpleContainer;
import net.minecraft.world.entity.player.Inventory;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.inventory.*;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.Level;

import java.util.List;

public class SawMillMenu extends AbstractContainerMenu {
    final Slot inputSlot;
    final Slot resultSlot;
    final ResultContainer resultContainer = new ResultContainer();
    /*
    public static final int INPUT_SLOT = 0;
    public static final int RESULT_SLOT = 1;
    private static final int INV_SLOT_START = 2;
    private static final int INV_SLOT_END = 29;
    private static final int USE_ROW_SLOT_START = 29;
    private static final int USE_ROW_SLOT_END = 38;
     */
    private final ContainerLevelAccess access;
    private final DataSlot selectedRecipeIndex = DataSlot.standalone();
    private final Level level;
  //  private final List<SawMillingRecipe> allRecipies;
    long lastSoundTime;
    Runnable slotUpdateListener = () -> {
    };
    private List<SawMillingRecipe> recipesCache = Lists.newArrayList();
    //private int selectedRecipe = -1;

    //private List<SawMillingRecipe> recipes = Lists.newArrayList();

    private ItemStack input = ItemStack.EMPTY;

    public final Container container = new SimpleContainer(1) {
        public void setChanged() {
            super.setChanged();
            slotsChanged(this);
            slotUpdateListener.run();
        }
    };

    public SawMillMenu(int p_40294_, Inventory p_40295_) {
        this(p_40294_, p_40295_, ContainerLevelAccess.NULL);
    }

    public SawMillMenu(int p_40297_, Inventory p_40298_, final ContainerLevelAccess p_40299_) {
        super(ModMenuTypes.SAW_MILL_MENU.get(), p_40297_);
        this.access = p_40299_;
        this.level = p_40298_.player.level;
        this.inputSlot = this.addSlot(new Slot(this.container, 0, 20, 33));
        this.resultSlot = this.addSlot(new Slot(this.resultContainer, 1, 143, 33) {
            public boolean mayPlace(ItemStack p_40362_) {
                return false;
            }

            public void onTake(Player p_150672_, ItemStack p_150673_) {
                p_150673_.onCraftedBy(p_150672_.level, p_150672_, p_150673_.getCount());
                resultContainer.awardUsedRecipes(p_150672_);
                ItemStack itemstack = inputSlot.remove(1);
                if (!itemstack.isEmpty()) {
                    refreshList();
                }

                p_40299_.execute((p_40364_, p_40365_) -> {
                    long l = p_40364_.getGameTime();
                    if (lastSoundTime != l) {
                        p_40364_.playSound(null, p_40365_, SoundEvents.UI_STONECUTTER_TAKE_RESULT, SoundSource.BLOCKS, 1.0F, 1.0F);
                        lastSoundTime = l;
                    }

                });
                super.onTake(p_150672_, p_150673_);
            }
        });

        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 9; ++j) {
                this.addSlot(new Slot(p_40298_, j + i * 9 + 9, 8 + j * 18, 84 + i * 18));
            }
        }

        for (int k = 0; k < 9; ++k) {
            this.addSlot(new Slot(p_40298_, k, 8 + k * 18, 142));
        }

        this.addDataSlot(this.selectedRecipeIndex);
        this.selectedRecipeIndex.set(-1);
    }

   /* public int getSelectedRecipeIndex() {
        return this.selectedRecipeIndex.get();
    }

    public List<SawMillingRecipe> getRecipes() {
        return new ArrayList<>(this.level.getRecipeManager().getRecipesFor(SawMillingRecipe.Type.INSTANCE,
                new SimpleContainer(new ItemStack(Items.STICK, 1)),
                this.level));
    }
    */

    public int getNumRecipes() {
        return getCraftableRecipes().size();
    }

    public boolean hasInputItem() {
      /*
        System.out.println("this.inputSlot.hasItem()=" + this.inputSlot.hasItem() + " this.recipes.isEmpty()=" + this.recipes.isEmpty());
        System.out.println("getItem()=" + this.inputSlot.getItem());
        System.out.println("input=" + this.input);
       */
        return this.inputSlot.hasItem() && getNumRecipes() != 0;
    }

    public boolean stillValid(Player player) {
        return stillValid(this.access, player, ModBlocks.getBlock("sawmill").get());
    }

    public boolean clickMenuButton(Player player, int buttonId) {
        if (this.isValidRecipeIndex(buttonId)) this.selectedRecipeIndex.set(buttonId);

        return true;
    }

    private boolean isValidRecipeIndex(int index) {
        return index >= 0 && index < getNumRecipes();
    }

    public void slotsChanged(Container container) {
        ItemStack itemstack = this.inputSlot.getItem();
        if (!itemstack.is(this.input.getItem())) {
            this.input = itemstack.copy();
            this.selectedRecipeIndex.set(-1);
            refreshList();
        }
    }

    private void setupRecipeList(Container container, ItemStack itemStack) {
        System.out.println("setupRecipeList");
        // this.recipes.clear();
         this.selectedRecipeIndex.set(-1);
        this.resultSlot.set(ItemStack.EMPTY);


       /* this.recipes = new ArrayList<>(this.level.getRecipeManager().getRecipesFor(SawMillingRecipe.Type.INSTANCE,
                new SimpleContainer(new ItemStack(Items.STICK, 1)),
                this.level));
        if (!itemStack.isEmpty()) {
            for (SawMillingRecipe re : recipes) {
                System.err.println(re.getId().toString());
            }
        }

        */
    }

    void setupResultSlot() {
        /*
        if (!this.recipes.isEmpty() && this.isValidRecipeIndex(this.selectedRecipeIndex.get())) {
            SawMillingRecipe SawMillingRecipe = this.recipes.get(this.selectedRecipeIndex.get());
            this.resultContainer.setRecipeUsed(SawMillingRecipe);
            this.resultSlot.set(SawMillingRecipe.assemble(this.container));
        } else {
            this.resultSlot.set(ItemStack.EMPTY);
        }

        this.broadcastChanges(); */
    }


    public boolean canTakeItemForPickAll(ItemStack p_40321_, Slot p_40322_) {
        return p_40322_.container != this.resultContainer && super.canTakeItemForPickAll(p_40321_, p_40322_);
    }

    public ItemStack quickMoveStack(Player player, int slotId) {
        ItemStack itemstack = ItemStack.EMPTY;
        Slot slot = this.slots.get(slotId);
        if (slot != null && slot.hasItem()) {
            ItemStack itemstack1 = slot.getItem();
            Item item = itemstack1.getItem();
            itemstack = itemstack1.copy();
            if (slotId == 1) {
                item.onCraftedBy(itemstack1, player.level, player);
                if (!this.moveItemStackTo(itemstack1, 2, 38, true)) {
                    return ItemStack.EMPTY;
                }

                slot.onQuickCraft(itemstack1, itemstack);
            } else if (slotId == 0) {
                if (!this.moveItemStackTo(itemstack1, 2, 38, false)) {
                    return ItemStack.EMPTY;
                }
            } else if (this.level.getRecipeManager().getRecipeFor(SawMillingRecipe.Type.INSTANCE, new SimpleContainer(itemstack1), this.level).isPresent()) {
                if (!this.moveItemStackTo(itemstack1, 0, 1, false)) {
                    return ItemStack.EMPTY;
                }
            } else if (slotId >= 2 && slotId < 29) {
                if (!this.moveItemStackTo(itemstack1, 29, 38, false)) {
                    return ItemStack.EMPTY;
                }
            } else if (slotId >= 29 && slotId < 38 && !this.moveItemStackTo(itemstack1, 2, 29, false)) {
                return ItemStack.EMPTY;
            }

            if (itemstack1.isEmpty()) {
                slot.set(ItemStack.EMPTY);
            }

            slot.setChanged();
            if (itemstack1.getCount() == itemstack.getCount()) {
                return ItemStack.EMPTY;
            }

            slot.onTake(player, itemstack1);
            this.broadcastChanges();
        }

        return itemstack;
    }

    public void removed(Player player) {
        super.removed(player);
        this.resultContainer.removeItemNoUpdate(1);
        this.access.execute((p_40313_, p_40314_) -> {
            this.clearContainer(player, this.container);
        });
    }


    // by radston12

    public MenuType<?> getType() {
        return ModMenuTypes.SAW_MILL_MENU.get(); // edited
    }

    public boolean shouldRender() {
        return this.inputSlot.hasItem() && getNumRecipes() != 0;
    }

    private void refreshList() {
        recipesCache = this.level.getRecipeManager().getRecipesFor(SawMillingRecipe.Type.INSTANCE, new SimpleContainer(input), this.level);
    }


    public List<SawMillingRecipe> getCraftableRecipes() {
        slotsChanged(null);

        return recipesCache;
    }

    public int getSelectedRecipeId() {
        return selectedRecipeIndex.get();
    }
}
